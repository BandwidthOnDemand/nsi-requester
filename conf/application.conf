# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret=">WHknlCprTkSFP20JUhwNaF8CG>lM3v:SuQbWUVJ`]Vd2:BRUdXwDM9fmyEgP:_4"

# The application languages
# ~~~~~
application.langs="en"


# Enable this value to use the original default SSL behavior instead of the new
# Play behavior when using HTTPS natively within the nsi-requester.  This
# controls client side behaviors so we can support 2 way TLS via the Java
# keystore.  With this option set to "true" you must specify the Java key and
# trust stores on the command line.  This is the only option if you want a
# standalone HTTPS server.
# ~~~~~
#ws.ssl.default = true

# With ws.ssl.default == false you can use the Play Framework's new WS client
# features for configuring the backend SSL/TLS sessions.  Use the ws.ssl.keyManager
# and ws.ssl.trustManager to configure the key and trust stores, or alternatively
# specify them on the command line. Additional WS client configuration information
# can be found at http://www.playframework.com/documentation/2.3.x/WsSSL
# ~~~~~
#ws.ssl {
#  default = false
#  keyManager = {
#    stores = [
#      { path: "conf/keystore.jks", type: "JKS", password: "changeit" }
#    ]
#  }
#  trustManager = {
#    stores = [
#      { path: "conf/truststore.jks", type: "JKS", password = "changeit" }
#    ]
#  }
#}

# Change the root path of the application by appending the supplied path to the
# application routes.  This allows hosting of nsi-requester on same server as
# nsi-safnari fronted by Apache httpd mod_poxy.
# ~~~~~
# application.context="/requester"

# Hide the fact this is a Play HTTP installation.
# ~~~~~
# http.exposePlayServer="false"

# Configure the nsi-requester identity and available provider NSA.
# ~~~~~
requester {
  # Set "ssl" to "true" if you are using SSL natively within the nsi-requester.
  # This forces the https url into the replyto field of the NSI header, otherwise
  # it relies on the "X-Forwarded-Proto" HTTP header field to be set by the
  # fronting HTTP proxy.
  ssl = "false"

  # NSI specific configurations.
  nsi {
    # Unique identifier of the this NSA.  Use something uniquely named under
    # your network.
    requesterNsa = "urn:ogf:network:surfnet.nl:1990:nsa:nsi-requester"

    # List of provider addresses made available in the settings menu.  This
    # list is specifically for SURFnet deployment using stunnel for SSL on
    # the back end.  If you are not using stunnel for backewnd SSL then you
    # need to populate the NSA's public provider URL.
    providers = [
      { id = "urn:ogf:network:es.net:2013:nsa:nsi-aggr-west"
        url = "http://localhost:6693/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:geant.net:2013:nsa"
        url = "http://localhost:6692/nsi/ConnectionProvider"
        portPrefix = "urn:ogf:network:geant.net:2013:topology:"
      }
      { id = "urn:ogf:network:netherlight.net:2013:nsa:bod"
        url = "http://localhost:6777/nsi/v2/provider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:netherlight.net:2013:nsa:safnari"
        url = "http://localhost:6691/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:nordu.net:2013:nsa"
        url = "http://localhost:6694/NSI/services/CS2"
        portPrefix = "urn:ogf:network:nordu.net:2013:topology:"
      }
      { id = "urn:ogf:network:nordu.net:2013:testbed:nsa"
        url = "http://localhost:6698/NSI/services/CS2"
        portPrefix = "urn:ogf:network:nordu.net:2013:testbed:topology:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:bod"
        url = "https://bod.surfnet.nl/nsi/v2/provider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:port:surfnet6:production:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:bod-acc"
        url = "http://localhost:6697/nsi/v2/provider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:testbed:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:bod-dev"
        url = "http://localhost:8082/bod/nsi/v2/provider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:testbed:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:bod7"
        url = "http://localhost:6695/nsi/v2/provider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:production7:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:safnari"
        url = "http://localhost:6699/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:safnari-acc"
        url = "http://localhost:6696/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:safnari-dev"
        url = "http://localhost:9000/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
    ]
  }
}

# Deployment specific configuration for the nsi-requester web page.  This
# information is treated as runtime data and not static CSS layout.  For
# static CSS layout configuration look at the app/assets/css/variables.less
# file for customer colour and page layout that is built at compile time.
# ~~~~~
web {
  favicon = "images/favicon.ico"
  footer = "SURFnet bv | Postbus 19035, 3501 DA Utrecht | T +31 302 305 305 | F +31 302 305 329 |"
  contactURL = "mailto:admin@surfnet.nl"
  contactText = "admin@surfnet.nl"
  #favicon = "images/esnet-favicon.png"
  #footer = "Lawrence Berkeley National Laboratory | Energy Sciences Network | 1 Cyclotron Road, Mail stop 50A-3111. Berkeley, CA 94720 |"
  #contactURL = "https://www.es.net/contact-us/?"
  #contactText = "Contact Us"
}

#google.analytics.code=

